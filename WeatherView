import SwiftUI

struct WeatherView: View {
    var weather: ResponseBody
    @Environment(\.presentationMode) var presentationMode

    var body: some View {
        ZStack {
            // Fond dégradé avec une couleur plus douce
            LinearGradient(gradient: Gradient(colors: [Color.blue.opacity(0.7), Color.purple.opacity(0.7)]), startPoint: .top, endPoint: .bottom)
                .edgesIgnoringSafeArea(.all)
            
            VStack {
                HStack {
                    // Icône pour revenir à la WelcomeView
                    Button(action: {
                        presentationMode.wrappedValue.dismiss()
                    }) {
                        Image(systemName: "arrow.left.circle.fill")
                            .font(.system(size: 35))
                            .foregroundColor(.white)
                    }
                    .padding()
                    
                    Spacer()
                }
                
                // Titre de la ville et date
                VStack(alignment: .leading, spacing: 8) {
                    Text(weather.name)
                        .bold()
                        .font(.largeTitle)
                        .foregroundColor(.white)
                    
                    Text("Today, \(Date().formatted(.dateTime.month().day().hour().minute()))")
                        .font(.subheadline)
                        .foregroundColor(.white)
                        .opacity(0.85)
                }
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding([.top, .leading], 20)

                Spacer()

                // Affichage des données météo
                VStack {
                    HStack {
                        VStack(spacing: 15) {
                            Image(systemName: "cloud.sun.fill")
                                .font(.system(size: 45))
                                .foregroundColor(.white)
                            
                            Text("\(weather.weather[0].main)")
                                .foregroundColor(.white)
                                .fontWeight(.medium)
                                .font(.title2)
                        }
                        .frame(width: 170, alignment: .leading)
                        
                        Spacer()
                        
                        Text(weather.main.feelsLike.roundDouble() + "°")
                            .font(.system(size: 90))
                            .fontWeight(.bold)
                            .foregroundColor(.white)
                            .padding()
                            .shadow(radius: 10)
                    }
                    
                    Spacer()
                        .frame(height:  20)
                    
                    // Image en arrière-plan avec un effet de flou
                    AsyncImage(url: URL(string: "https://cdn.pixabay.com/photo/2020/01/24/21/33/city-4791269_960_720.png")) { image in
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                            .frame(width: 380, height: 250)
                            .cornerRadius(25)
                            .blur(radius: 5)
                    } placeholder: {
                        ProgressView()
                    }
                    
                    Spacer()
                }
                .frame(maxWidth: .infinity, alignment: .trailing)
            }
            .padding()
            
            // Informations sur le temps actuel avec un fond semi-transparent
            VStack {
                Spacer()
                VStack(alignment: .leading, spacing: 18) {
                    Text("Weather details")
                        .bold()
                        .font(.title3)
                        .foregroundColor(.white)
                        .padding(.bottom)
                    
                    HStack {
                        WeatherRow(logo: "thermometer", name: "Min temp", value: "\(weather.main.tempMin.roundDouble())°")
                        Spacer()
                        WeatherRow(logo: "thermometer", name: "Max temp", value: "\(weather.main.tempMax.roundDouble())°")
                    }
                    
                    HStack {
                        WeatherRow(logo: "wind", name: "Wind speed", value: "\(weather.wind.speed.roundDouble()) m/s")
                        Spacer()
                        WeatherRow(logo: "humidity", name: "Humidity", value: "\(weather.main.humidity.roundDouble())%")
                    }
                }
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding()
                .background(Color.white.opacity(0.85))
                .cornerRadius(25, corners: [.topLeft, .topRight])
                .shadow(radius: 10)
            }
            .padding(.bottom, 40)
        }
        .preferredColorScheme(.dark)
    }
}

struct WeatherView_Previews: PreviewProvider {
    static var previews: some View {
        WeatherView(weather: previewWeather)
    }
}
